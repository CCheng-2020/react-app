{"version":3,"sources":["GetRequest.js","GetData.js","App.js","reportWebVitals.js","index.js"],"names":["GetData","props","handleQueryChange","e","setState","query","target","value","handlePageClick","selectedPage","offset","state","perPage","currentPage","handleSubmit","tle","loading","sensorData","bind","a","preventDefault","headers","params","URLSearchParams","this","toString","url","axios","get","res","onSubmit","type","name","onChange","postData","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Component","then","response","data","slice","console","log","map","pd","Fragment","TLE_LINE0","TLE_LINE1","TLE_LINE2","Math","ceil","length","App","className","GetRequest","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb110c4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nclass GetData extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          query: \"\",\r\n          tle: \"3le\",\r\n          loading: \"false\",\r\n          offset:0,\r\n          sensorData: [],\r\n          perPage: 10,\r\n          currentPage: 0,\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n  \r\n    handleQueryChange = (e) => {\r\n      this.setState({ query: e.target.value });\r\n      //console.log(this.state.query);\r\n      //console.log(updatedQuery);  \r\n    }\r\n  \r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const headers = {\r\n            'X-Client-Dn': 'CN=Alice'\r\n          };\r\n\r\n          var params = new URLSearchParams({\r\n            tle:this.state.tle,\r\n            query: this.state.query\r\n          }).toString();\r\n\r\n          const url = 'https://3ye9kqini1.execute-api.us-east-2.amazonaws.com/test/search?' + params\r\n\r\n        const res = await axios.get(url,{headers})\r\n        this.setState({ sensorData: res})\r\n        this.setState({ loading: false})\r\n        //console.log(this.state.loading)\r\n        //console.log(this.state.sensorData)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n      handlePageClick = (e) => {\r\n        const selectedPage = e.selectedPage\r\n        const offset = selectedPage * this.state.perPage;\r\n\r\n        this.setState({\r\n          currentPage: selectedPage,\r\n          offset: offset\r\n          }, () => {\r\n            this.handleSubmit()\r\n          });\r\n        \r\n        }\r\n      \r\n    \r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <h1>Search TLE</h1>\r\n            <label>\r\n              1 hour\r\n              <input type =\"radio\" value = \"1\" name=\"radiovalues\" onChange={this.handleQueryChange} />\r\n            </label>\r\n            <label>\r\n              24 hours\r\n              <input type =\"radio\" value = \"24\" name=\"radiovalues\" onChange={this.handleQueryChange} />\r\n            </label>\r\n            <button>Submit</button>          \r\n          </form>\r\n          <div>\r\n                {this.state.postData}\r\n                <ReactPaginate\r\n                    previousLabel={\"prev\"}\r\n                    nextLabel={\"next\"}\r\n                    breakLabel={\"...\"}\r\n                    breakClassName={\"break-me\"}\r\n                    pageCount={this.state.pageCount}\r\n                    marginPagesDisplayed={2}\r\n                    pageRangeDisplayed={5}\r\n                    onPageChange={this.handlePageClick}\r\n                    containerClassName={\"pagination\"}\r\n                    subContainerClassName={\"pages pagination\"}\r\n                    activeClassName={\"active\"}/>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n      );\r\n    }\r\n\r\n  \r\n  }\r\n  export default GetData ;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nclass GetData extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          query: \"\",\r\n          tle: \"3le\",\r\n          loading: \"false\",\r\n          offset:0,\r\n          sensorData: [],\r\n          perPage: 10,\r\n          currentPage: 0,\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n  \r\n    handleQueryChange = (e) => {\r\n      this.setState({ query: e.target.value });\r\n      //console.log(this.state.query);\r\n      //console.log(updatedQuery);  \r\n    }\r\n  \r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const headers = {\r\n            'X-Client-Dn': 'CN=Alice'\r\n          };\r\n\r\n          var params = new URLSearchParams({\r\n            tle:this.state.tle,\r\n            query: this.state.query\r\n          }).toString();\r\n\r\n          const url = 'https://3ye9kqini1.execute-api.us-east-2.amazonaws.com/test/search?' + params\r\n\r\n        await axios.get(url,{headers})\r\n            .then(response => {\r\n              //this.setState({sensorData:response.data})\r\n\r\n              const sensorData = response.data;\r\n              const slice = sensorData.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n              console.log(slice[0])\r\n              const postData = slice.map(pd => <React.Fragment>\r\n                <p>{pd.TLE_LINE0}</p>\r\n                <p>{pd.TLE_LINE1}</p>\r\n                <p>{pd.TLE_LINE2}</p>\r\n              </React.Fragment>)\r\n              console.log(postData)\r\n                this.setState({\r\n                  pageCount: Math.ceil(sensorData.length / this.state.perPage),\r\n                  postData\r\n                })               \r\n              });\r\n      }\r\n\r\n\r\n      handlePageClick = (e) => {\r\n        const selectedPage = e.selectedPage\r\n        const offset = selectedPage * this.state.perPage;\r\n\r\n        this.setState({\r\n          currentPage: selectedPage,\r\n          offset: offset\r\n          }, () => {\r\n            this.handleSubmit()\r\n          });\r\n        \r\n        }\r\n      \r\n    \r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <h1>Search TLE</h1>\r\n            <label>\r\n              1 hour\r\n              <input type =\"radio\" value = \"1\" name=\"radiovalues\" onChange={this.handleQueryChange} />\r\n            </label>\r\n            <label>\r\n              24 hours\r\n              <input type =\"radio\" value = \"24\" name=\"radiovalues\" onChange={this.handleQueryChange} />\r\n            </label>\r\n            <button>Submit</button>          \r\n          </form>\r\n          <div>\r\n                {this.state.postData}\r\n                <ReactPaginate\r\n                    previousLabel={\"prev\"}\r\n                    nextLabel={\"next\"}\r\n                    breakLabel={\"...\"}\r\n                    breakClassName={\"break-me\"}\r\n                    pageCount={this.state.pageCount}\r\n                    marginPagesDisplayed={2}\r\n                    pageRangeDisplayed={5}\r\n                    onPageChange={this.handlePageClick}\r\n                    containerClassName={\"pagination\"}\r\n                    subContainerClassName={\"pages pagination\"}\r\n                    activeClassName={\"active\"}/>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n      );\r\n    }\r\n\r\n  \r\n  }\r\n  export default GetData ;","import React from 'react';\nimport \"./App.css\";\nimport GetRequest from './GetRequest.js';\nimport GetData from './GetData.js';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <h3 className=\"p-3 text-center\">Starbuck</h3>\n                <GetData/>\n                <GetRequest/>\n            </div>\n        );\n    }\n}\n\nexport { App }; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}